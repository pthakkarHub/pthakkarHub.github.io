<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prashant Thakkar</title>
    <link>/</link>
    <description>Recent content on Prashant Thakkar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Jul 2016 13:53:25 +0630</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Channels</title>
      <link>/post/golang/channels/</link>
      <pubDate>Sun, 10 Jul 2016 13:53:25 +0630</pubDate>
      
      <guid>/post/golang/channels/</guid>
      <description>Go&amp;rsquo;s concurrency model is based on &amp;ldquo;Do not communicate by sharing memory; instead, share memory by communicating&amp;rdquo;, and channels is the way of achieving this. Channels are used for inter Go Routine communication. Unlike other programming language where objects/memory is shared between two or more thread by acquiring lock, in Go channels are used to pass the objects to Go Routine thereby ensuring only one Go Routine have access to it.</description>
    </item>
    
    <item>
      <title>Go Routine</title>
      <link>/post/golang/routines/</link>
      <pubDate>Sat, 09 Jul 2016 13:53:25 +0630</pubDate>
      
      <guid>/post/golang/routines/</guid>
      <description>One of the most talked feature of Go is its support for Concurrency and Go Routine and Channel are the two most important instrument provided by Go for concurrency. In today&amp;rsquo;s blog we will try and understand what Go Routine is and how to use it. But we before start, let us try and understand what Concurrency is?
Concurrency The most common answer is doing things in parallel and in case of programming, executing the piece of code in parallel.</description>
    </item>
    
    <item>
      <title>Interface and Composition</title>
      <link>/post/golang/interface/</link>
      <pubDate>Fri, 08 Jul 2016 13:53:25 +0630</pubDate>
      
      <guid>/post/golang/interface/</guid>
      <description>In today&amp;rsquo;s post we are going to look at how Go supports interface and composition. Interface and composition form the base of any language and Go is no different.
Interface Interface is defined as group of methods without the actual method implementation. It is the responsibility of implementer of the interface to provide the actual implementation. Thus Interface can be considered as a contract/protocol which needs to be fulfilled by implementer.</description>
    </item>
    
    <item>
      <title>GoLang Tutorial</title>
      <link>/tutorial/golang/</link>
      <pubDate>Sun, 21 Feb 2016 13:53:25 +0630</pubDate>
      
      <guid>/tutorial/golang/</guid>
      <description>Index  Introduction to GoLang Basics: Types, Variables and Constants  Control Flows Struct, Map, Array and Slice Functions and Pointers Interface and Composition Go Routines Channels  </description>
    </item>
    
    <item>
      <title>Search</title>
      <link>/search/</link>
      <pubDate>Sun, 21 Feb 2016 11:31:08 +0530</pubDate>
      
      <guid>/search/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Functions and Pointers</title>
      <link>/post/golang/functions_pointers/</link>
      <pubDate>Wed, 13 Jan 2016 13:53:25 +0630</pubDate>
      
      <guid>/post/golang/functions_pointers/</guid>
      <description>Functions Go, does not have keywords like private, public, protected and final etc and Go does not have concept of inheritance so it is very important to understand how functions can be used to do things that we ideally do when we use any other language.
Keyword func, is used for defining function. We have already seen the function main which is starting point of every application.
func main() { fmt.</description>
    </item>
    
    <item>
      <title>Struct, Map, Array and Slice</title>
      <link>/post/golang/more_datatypes/</link>
      <pubDate>Sat, 09 Jan 2016 13:53:25 +0630</pubDate>
      
      <guid>/post/golang/more_datatypes/</guid>
      <description>Struct Go is not a traditional OO language and hence does not have concept of class. Instead structures are used for holding values. If you are familiar with Java or .Net (may be true for some other OO languages too), you can co-relate struct to beans.
type Person struct { FirstName string LastName string Age int } Here, we have defined Person of type struct, to hold values for properties/fields related to person like first name, last name and age.</description>
    </item>
    
    <item>
      <title>Control Flows</title>
      <link>/post/golang/controlflows/</link>
      <pubDate>Fri, 01 Jan 2016 13:53:25 +0630</pubDate>
      
      <guid>/post/golang/controlflows/</guid>
      <description>The best part of programming in Go is that there are not multiple ways of doing standard things and that makes reading code and understanding it easier. But at the same time as we saw in previous post Go follows different conventions which needs to be understood.
for Loop The for loop construct, is the only way for looping. Unlike other languages Go does not have familiar constructs like while, do-while etc.</description>
    </item>
    
    <item>
      <title>Basics: Types, Variables and Constants</title>
      <link>/post/golang/basics/</link>
      <pubDate>Wed, 30 Dec 2015 13:53:25 +0630</pubDate>
      
      <guid>/post/golang/basics/</guid>
      <description>In today&amp;rsquo;s post we will learn basics of Go language like supported Types, how to declare and initialize variables and constants. Just like any other language, Go has its own way of declaring and initializing variables and constants.
Data Types   Boolean: Used for true and false. Use bool to declare variable of type Boolean.
  Numeric: Go supports unsigned, signed integer, float, complex, byte and rune
   Numeric Types Description      Unsigned integers      uint8 0-255    uint16 0-65535    uint32 0-4294967295    uint64 0-18446744073709551615   Signed integers      int8 -128-127    int16 -32768-32767    int32 -2147483648-2147483647    int64 -9223372036854775808-9223372036854775807    Floating Numbers     float32 32 bit    float64 64 bit   Floating Number with imaginary part      complex64 32 bit    complex128 64 bit   byte Alias to uint8    rune Alias to int32     In addition to above, Go also has uint and int (32 or 64 bit depending on underlying OS) and uintptr (unsigned integer to store uninterrupted bits of pointer value)</description>
    </item>
    
    <item>
      <title>Introduction to GoLang</title>
      <link>/post/golang/introduction/</link>
      <pubDate>Mon, 09 Nov 2015 13:53:25 +0630</pubDate>
      
      <guid>/post/golang/introduction/</guid>
      <description>GoLang is an open source language developed and backed by internet giant Google. GoLang is famously known as Go and that is how we are going to refer to in future. In 2007, Robert Griesemer, Rob Pike and Ken Thompson at Google started with experiment to develop a language that will have minimal of features, but will cater most of the use cases. Beside this their idea was to overcome some of the hurdles in development, build and deployment of code written in C (and also of any other languages).</description>
    </item>
    
    <item>
      <title>Android Tutorial</title>
      <link>/tutorial/android/</link>
      <pubDate>Sun, 05 Feb 2012 13:53:25 +0630</pubDate>
      
      <guid>/tutorial/android/</guid>
      <description>Index  Introduction to Android UI Layouts Android Preferences Android Async Task Android Menus Introduction to Android SQLite Database Change Preference Summary  </description>
    </item>
    
    <item>
      <title>Change Preference Summary</title>
      <link>/post/android/change_preference/</link>
      <pubDate>Sun, 05 Feb 2012 13:53:25 +0630</pubDate>
      
      <guid>/post/android/change_preference/</guid>
      <description>In Today&amp;rsquo;s post we are going to look at How to Change Summary of Edit Text Preference. But before moving ahead, if you want to know more about Preferences click here.
First create a preference screen with only one preference EditTextPreference as show below in xml. Let us call this xml as setttings.xml
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;PreferenceScreen xmlns:android=&amp;#34;http://schemas.android.com/apk/res/android&amp;#34; &amp;gt; &amp;lt;EditTextPreference android:dialogTitle=&amp;#34;Enter Name&amp;#34; android:key=&amp;#34;name&amp;#34; android:summary=&amp;#34;Enter Your Name&amp;#34; android:title=&amp;#34;Edit Text Preference&amp;#34; /&amp;gt; &amp;lt;/PreferenceScreen&amp;gt; As shown above we are creating EditTextPreference with key &amp;ldquo;name&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Introduction to Android SQLite Database</title>
      <link>/post/android/sqlite/</link>
      <pubDate>Sun, 03 Jul 2011 13:53:25 +0630</pubDate>
      
      <guid>/post/android/sqlite/</guid>
      <description>Android provide various options for data persistence like Preferences, File and Database etc. This post we will introduce you to one of the option i.e. Android SQLite Database.
Let us take an example of Student database. i.e. student_database (DATABASE_NAME). We will create table tb_student (DATABASE_TABLE), with 3 columns i.e. _id (KEY_ROWID), name (KEY_NAME) and grade (KEY_GRADE). Columns _id is primary key and autoincrement, while name and garde are text .</description>
    </item>
    
    <item>
      <title>Android Menus</title>
      <link>/post/android/menus/</link>
      <pubDate>Sun, 10 Oct 2010 13:53:25 +0630</pubDate>
      
      <guid>/post/android/menus/</guid>
      <description>Menus are one of the most important parts of any application and when it comes to mobile Menus become more important considering the fact that area available is restricted. Through this blog we will look at the following various type of Android Menus available with example for each of them:
 Options Menu Context Menu Submenu  Options Menu: Menu opened when MENU key on the device is clicked is called options menu.</description>
    </item>
    
    <item>
      <title>Android Async Task</title>
      <link>/post/android/async_task/</link>
      <pubDate>Sun, 01 Aug 2010 13:53:25 +0630</pubDate>
      
      <guid>/post/android/async_task/</guid>
      <description>Through this article we will look at one of the important feature of Android i.e AsyncTask for performing task which takes long time for execution with example. Also we will look at other mechanisms and see why AsyncTask is better approach.
Android application follows single thread model i.e. when android application is launched, a thread is created for running that application. This single thread model works fine for normal execution, but for the instance like network call which are usually long operations, UI hangs waiting for the response from the server.</description>
    </item>
    
    <item>
      <title>Android Preferences</title>
      <link>/post/android/preferences/</link>
      <pubDate>Sun, 11 Jul 2010 13:53:25 +0630</pubDate>
      
      <guid>/post/android/preferences/</guid>
      <description>Most of applications have some setting which user can/needs to configure, and to do this setting a screen needs to be designed along with code to read the data and display and update the data back.
In Android we can do this with minimum efforts via Preferences. Another advantage of using Android preference for application setting helps Android user because it will be uniform across the applications.
In this article we will look at the standard Preference available i.</description>
    </item>
    
    <item>
      <title>Introduction to Android UI Layouts</title>
      <link>/post/android/introduction/</link>
      <pubDate>Sat, 03 Jul 2010 13:53:25 +0630</pubDate>
      
      <guid>/post/android/introduction/</guid>
      <description>Considering the fact that available space on mobile screen is small, UI design of mobile application is very important. For Android each screen follows one or more layout. Layouts are like container that holds various view or layouts. Placing of views on the screen depends on the layout selected.
This article will introduce following basic layouts with examples:
 Linear Layout Table Layout Absolute Layout Relative Layout Frame Layout  Let us now look at each of them in details and understand them.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>Hello and Welcome to my website.
Introduction Born and brought up in Mumbai India, I completed my B.E. in Computers from Mumbai University. I have total 17+ years of experience in software development and working at one of the MNC in Mumbai India.
Technologies Worked mostly on Java and related techologies across various domains like e-Learning, B2B, Virtual Desktop and Finanace.
I have also tried my hands on Golang and Android and have been technical reviewer for few of the Android books.</description>
    </item>
    
    <item>
      <title>Articles</title>
      <link>/articles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/articles/</guid>
      <description> Development of Windows Mobile Applications Packt Publishing
 Part I Part II  </description>
    </item>
    
    <item>
      <title>Book Reviews</title>
      <link>/book_reviews/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/book_reviews/</guid>
      <description>Android Database Programming Packt Publishing
  Overview  Master the skills to build data-centric Android applications Go beyond just code by challenging yourself to think about practical use-cases with SQLite and others Focus on flushing out high level design concepts, before drilling down into different code examples  click here for more details
 Android Tablet Developer&amp;rsquo;s Cookbook Addison-Wesley Professional
  Overview The Android Tablet Developer&amp;rsquo;s Cookbook helps experienced Android developers leverage new Android 4.</description>
    </item>
    
  </channel>
</rss>